# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rover_msgs/bio_msg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rover_msgs.msg

class bio_msg(genpy.Message):
  _md5sum = "ce3326cb70451413da0fa73fa55e3748"
  _type = "rover_msgs/bio_msg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """drive_msg drill
drive_msg inner_cylinder
drive_msg stepper
================================================================================
MSG: rover_msgs/drive_msg
string direction
float64 speed
string mode"""
  __slots__ = ['drill','inner_cylinder','stepper']
  _slot_types = ['rover_msgs/drive_msg','rover_msgs/drive_msg','rover_msgs/drive_msg']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       drill,inner_cylinder,stepper

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(bio_msg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.drill is None:
        self.drill = rover_msgs.msg.drive_msg()
      if self.inner_cylinder is None:
        self.inner_cylinder = rover_msgs.msg.drive_msg()
      if self.stepper is None:
        self.stepper = rover_msgs.msg.drive_msg()
    else:
      self.drill = rover_msgs.msg.drive_msg()
      self.inner_cylinder = rover_msgs.msg.drive_msg()
      self.stepper = rover_msgs.msg.drive_msg()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.drill.direction
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.drill.speed
      buff.write(_get_struct_d().pack(_x))
      _x = self.drill.mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.inner_cylinder.direction
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.inner_cylinder.speed
      buff.write(_get_struct_d().pack(_x))
      _x = self.inner_cylinder.mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.stepper.direction
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.stepper.speed
      buff.write(_get_struct_d().pack(_x))
      _x = self.stepper.mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.drill is None:
        self.drill = rover_msgs.msg.drive_msg()
      if self.inner_cylinder is None:
        self.inner_cylinder = rover_msgs.msg.drive_msg()
      if self.stepper is None:
        self.stepper = rover_msgs.msg.drive_msg()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.drill.direction = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.drill.direction = str[start:end]
      start = end
      end += 8
      (self.drill.speed,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.drill.mode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.drill.mode = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.inner_cylinder.direction = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.inner_cylinder.direction = str[start:end]
      start = end
      end += 8
      (self.inner_cylinder.speed,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.inner_cylinder.mode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.inner_cylinder.mode = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.stepper.direction = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.stepper.direction = str[start:end]
      start = end
      end += 8
      (self.stepper.speed,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.stepper.mode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.stepper.mode = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.drill.direction
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.drill.speed
      buff.write(_get_struct_d().pack(_x))
      _x = self.drill.mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.inner_cylinder.direction
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.inner_cylinder.speed
      buff.write(_get_struct_d().pack(_x))
      _x = self.inner_cylinder.mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.stepper.direction
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.stepper.speed
      buff.write(_get_struct_d().pack(_x))
      _x = self.stepper.mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.drill is None:
        self.drill = rover_msgs.msg.drive_msg()
      if self.inner_cylinder is None:
        self.inner_cylinder = rover_msgs.msg.drive_msg()
      if self.stepper is None:
        self.stepper = rover_msgs.msg.drive_msg()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.drill.direction = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.drill.direction = str[start:end]
      start = end
      end += 8
      (self.drill.speed,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.drill.mode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.drill.mode = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.inner_cylinder.direction = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.inner_cylinder.direction = str[start:end]
      start = end
      end += 8
      (self.inner_cylinder.speed,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.inner_cylinder.mode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.inner_cylinder.mode = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.stepper.direction = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.stepper.direction = str[start:end]
      start = end
      end += 8
      (self.stepper.speed,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.stepper.mode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.stepper.mode = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
