// Generated by gencpp from file rover_msgs/bio_msg.msg
// DO NOT EDIT!


#ifndef ROVER_MSGS_MESSAGE_BIO_MSG_H
#define ROVER_MSGS_MESSAGE_BIO_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <rover_msgs/drive_msg.h>
#include <rover_msgs/drive_msg.h>
#include <rover_msgs/drive_msg.h>

namespace rover_msgs
{
template <class ContainerAllocator>
struct bio_msg_
{
  typedef bio_msg_<ContainerAllocator> Type;

  bio_msg_()
    : drill()
    , inner_cylinder()
    , stepper()  {
    }
  bio_msg_(const ContainerAllocator& _alloc)
    : drill(_alloc)
    , inner_cylinder(_alloc)
    , stepper(_alloc)  {
  (void)_alloc;
    }



   typedef  ::rover_msgs::drive_msg_<ContainerAllocator>  _drill_type;
  _drill_type drill;

   typedef  ::rover_msgs::drive_msg_<ContainerAllocator>  _inner_cylinder_type;
  _inner_cylinder_type inner_cylinder;

   typedef  ::rover_msgs::drive_msg_<ContainerAllocator>  _stepper_type;
  _stepper_type stepper;





  typedef boost::shared_ptr< ::rover_msgs::bio_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rover_msgs::bio_msg_<ContainerAllocator> const> ConstPtr;

}; // struct bio_msg_

typedef ::rover_msgs::bio_msg_<std::allocator<void> > bio_msg;

typedef boost::shared_ptr< ::rover_msgs::bio_msg > bio_msgPtr;
typedef boost::shared_ptr< ::rover_msgs::bio_msg const> bio_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rover_msgs::bio_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rover_msgs::bio_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rover_msgs::bio_msg_<ContainerAllocator1> & lhs, const ::rover_msgs::bio_msg_<ContainerAllocator2> & rhs)
{
  return lhs.drill == rhs.drill &&
    lhs.inner_cylinder == rhs.inner_cylinder &&
    lhs.stepper == rhs.stepper;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rover_msgs::bio_msg_<ContainerAllocator1> & lhs, const ::rover_msgs::bio_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rover_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rover_msgs::bio_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rover_msgs::bio_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rover_msgs::bio_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rover_msgs::bio_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rover_msgs::bio_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rover_msgs::bio_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rover_msgs::bio_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ce3326cb70451413da0fa73fa55e3748";
  }

  static const char* value(const ::rover_msgs::bio_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xce3326cb70451413ULL;
  static const uint64_t static_value2 = 0xda0fa73fa55e3748ULL;
};

template<class ContainerAllocator>
struct DataType< ::rover_msgs::bio_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rover_msgs/bio_msg";
  }

  static const char* value(const ::rover_msgs::bio_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rover_msgs::bio_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drive_msg drill\n"
"drive_msg inner_cylinder\n"
"drive_msg stepper\n"
"================================================================================\n"
"MSG: rover_msgs/drive_msg\n"
"string direction\n"
"float64 speed\n"
"string mode\n"
;
  }

  static const char* value(const ::rover_msgs::bio_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rover_msgs::bio_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.drill);
      stream.next(m.inner_cylinder);
      stream.next(m.stepper);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct bio_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rover_msgs::bio_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rover_msgs::bio_msg_<ContainerAllocator>& v)
  {
    s << indent << "drill: ";
    s << std::endl;
    Printer< ::rover_msgs::drive_msg_<ContainerAllocator> >::stream(s, indent + "  ", v.drill);
    s << indent << "inner_cylinder: ";
    s << std::endl;
    Printer< ::rover_msgs::drive_msg_<ContainerAllocator> >::stream(s, indent + "  ", v.inner_cylinder);
    s << indent << "stepper: ";
    s << std::endl;
    Printer< ::rover_msgs::drive_msg_<ContainerAllocator> >::stream(s, indent + "  ", v.stepper);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROVER_MSGS_MESSAGE_BIO_MSG_H
